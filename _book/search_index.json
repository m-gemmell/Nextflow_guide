[["index.html", "MG Nextflow Guide Chapter 1 Intro 1.1 Contents 1.2 Links", " MG Nextflow Guide Matthew R. Gemmell 2025-03-17 Chapter 1 Intro This is a quick and dirty guide on how I use Nextflow. It is primarily for my use but if someone else finds it I hope it will also proof useful. Additionally, this was made with R Bookdown. 1.1 Contents The chapters in this bookdown include: Concepts: 1.2 Links Useful links include: nextflow.io: The main website for Nextflow training.nextflow.io: Website with tutorials for Nextflow "],["01-Concepts.html", "Chapter 2 Concepts 2.1 Workflow 2.2 Variables 2.3 Channels, tuples, &amp; lists", " Chapter 2 Concepts 2.1 Workflow Nextflow is used to create workflows. A workflow consists of multiple processes. Each process has input and output. A process will not start until it has all the input it requires. This is important as a process will therefore wait till other processes are finished if the output of other processes are the input for the process. In the nextflow script each process is created in the main script body (or in a separate main.nf file). These processes are then called in the workflow. Example main.nf #!/usr/bin/env nextflow /* *Params */ params.dir = &quot;.&quot; params.input1 = &quot;input.txt&quot; /* * Processes */ process STEP1 { input: path(input_data) output: path(&quot;output1.txt&quot;) } process STEP2 { input: path(input_data) output: path(&quot;output2.txt&quot;) } /* * workflow */ workflow { /// Set input param to channel input1_ch=file(params.input1) /// Process 1 step1(input1_ch) /// Process 2 step2(step1.out) } 2.2 Variables Nextflow Variables are used across a nextflow script. Within the script section of a process block they are denoted by $ (e.g. $sample_id). Variable names cannot start with numbers. Bash variables within a script section must be denoted by a \\ (e.g. \\$var). 2.3 Channels, tuples, &amp; lists Channels, tuples, and lists are objects that contain multiple objects but work in different ways. 2.3.1 Channels Channels are specified and used in the workflow section. A Channel contains a number of values. Each value passes through a process separately, this is carried out via parallelisation. Example: A Channel called integers_ch contains the 10 values 1,2,3,4,5,6,7,8, &amp; 9. A process called multiple_by_10 multiples input by 10. If the Channel integers_ch was used as the input for the process multiple_by_10 the output woudl be a Channel of 10 values containing the values 10,20,30,40,50,60,70,80, &amp; 90. 2.3.2 Tuples &amp; Lists Tuples &amp; Lists are used within process blocks. There are many ways to create and manipulate them within and without process blocks. Confusingly Tuples &amp; Lists are both structured as [value_1,value_2,value_3]. 2.3.2.1 Tuples Tuples contain multiple values with each value assigned as a separate variable in a process. This allows you to input/output data which should be grouped together. The below example shows how to group sample ids with their paired fastq reads. process step1 { input: tuple val(sample_id), path(r1), path(r2) output: tuple val(sample_id), path(&quot;${sample_id}_r1_trimmed.fastq&quot;), path(&quot;${sample_id}_r2_trimmed.fastq&quot;) script: &quot;&quot;&quot; trim -i1 $r1 -i2 $r2 \\ -o1 ${sample_id}_r1_trimmed.fastq -o2 ${sample_id}_r2_trimmed.fastq &quot;&quot;&quot; } This is important as multiple Channels with multiple values are not ordered relative to each other. 2.3.2.2 Lists When a List is used within a script block all the values will be used together with a space () between each value. Example: The Channel r1_fastqs_ch contains the List [\"S1_R1.fastq\",\"S2_R1.fastq\",\"S3_R1.fastq\"] The below truncated nextflow script to run fastqc.... process r1_fastqc { input: path(r1s) output: ..... script: &quot;&quot;&quot; fastqc -o fastqc_output \\ $r1s &quot;&quot;&quot; } workflow { r1_fastqc(r1_fastqs_ch) } Would be run as: fastqc -o fastqc_output \\ S1_R1.fastq S2_R1.fastq S3_R1.fastq 2.3.2.3 Combinations Of course you can have a Channel that can contain multiple Tuples and/or Lists. Additionally Tuples can contain Lists. "],["02-Basic_loytout.html", "Chapter 3 Basic layout 3.1 main.nf 3.2 Params 3.3 Processes 3.4 workflow", " Chapter 3 Basic layout When using Nextflow each project should be within its own directory. Within the main directory of the project you will have all the Nextflow files you need. There are many Nextflow files you can have but the only essential file is a main .nf file which many people like to name as main.nf. This chapter will go over a basic main.nf file and its different parts. 3.1 main.nf The main.nf is a plain text file that contains Nextflow code. Below is an example: #!/usr/bin/env nextflow /* *Params */ params.dir = &quot;.&quot; params.outdir = &quot;./results&quot; params.input_file = &quot;/path/to/data/input.txt&quot; /* * Processes */ process STEP1 { publishDir: params.outdir, mode: &#39;copy&#39; input: path(input_data) output: path(&quot;output1.txt&quot;) script: &quot;&quot;&quot; create_output -i $input_data -o output1.txt &quot;&quot;&quot; } process STEP2 { publishDir: params.outdir, mode: &#39;copy&#39; input: path(input_data) output: path(&quot;output2.txt&quot;) script: &quot;&quot;&quot; create_output_2 -i $input_data -o output2.txt &quot;&quot;&quot; } /* * workflow */ workflow { /// Set input params to channels input_ch=file(params.input_file) /// Process 1 STEP1(input_ch) /// Process 2 STEP2(step1.out) } 3.2 Params The first section is the various initial parameters. This is useful for specifying input information for the workflow including: Input &amp; output directories Input data Metadata information Reference files Any time they are used anywhere within the script they must include params. as a prefix. 3.3 Processes Processes are how the tasks of a workflow are specified and have many parts. Process reference 3.3.1 Initialistion A process is defined by process NAME and the process body is cotnained with {}. The Process name is arbitrary and decided by the workflow designer. However some suggestions are: Do not start the name with numbers. Capitalise all letters used, this is normal convention and makes it easier to see what are processes in your workflow block. Separate words with _. Ensure all process names are unique and somewhat descriptive within your workflow. 3.3.2 publishDir All files created by the Process will be contained with the workflow's work directory (more info later). All files specified in the output section will be stored in the directory specified by publishDir, if the directory does not exist Nextflow will create it. The output data is stored in the specified based on the mode:. The modes are: copy: Copies the output files into the publish directory. copyNoFollow: Copies the output files into the publish directory without following symlinks ie. copies the links themselves. link: Creates a hard link in the publish directory for each output file. move: Moves the output files into the publish directory. Note: this is only supposed to be used for a terminal process i.e. a process whose output is not consumed by any other downstream process. rellink: Creates a relative symbolic link in the publish directory for each output file. symlink: Creates an absolute symbolic link in the publish directory for each output file (default). More info on publishDir 3.3.3 input These specify the input names and type. Input names are arbitrary but should follow variables rules. The 2 basic input types are: path: Specifies paths, generally poiting to files. val: Specifies values, these are generally text or numbers such as sample ids. 3.3.4 output These specify the output. If the output is a file it needs to be the actual name of the output file in quotes (double quotes are normally preferred). 3.3.5 script The script block, denoted by flanking triple double quotes (\"\"\"), contains the code the process will carry out. By default this will be bash code. Input variables can be denoted by a $ and output variables are written like normal script but can also use input variables such as sample ids. 3.4 workflow The workflow section is where all the other sections come together so the workflow knows how to utilise them. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
